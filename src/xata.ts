// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from '@xata.io/client'
import type { BaseClientOptions, SchemaInference, XataRecord } from '@xata.io/client'

const tables = [
    {
        name: 'posts',
        columns: [
            { name: 'title', type: 'string' },
            { name: 'labels', type: 'multiple' },
            { name: 'slug', type: 'string' },
            { name: 'text', type: 'text' },
            { name: 'author', type: 'link', link: { table: 'users' } },
            { name: 'created_at', type: 'datetime' },
            { name: 'views', type: 'int' },
        ],
    },
    {
        name: 'users',
        columns: [
            { name: 'name', type: 'string' },
            { name: 'email', type: 'email' },
            { name: 'bio', type: 'text' },
        ],
        revLinks: [{ column: 'author', table: 'posts' }],
    },
] as const

export type SchemaTables = typeof tables
export type InferredTypes = SchemaInference<SchemaTables>

export type Posts = InferredTypes['posts']
export type PostsRecord = Posts & XataRecord

export type Users = InferredTypes['users']
export type UsersRecord = Users & XataRecord

export type DatabaseSchema = {
    posts: PostsRecord
    users: UsersRecord
}

const DatabaseClient = buildClient()

const defaultOptions = {
    databaseURL: process.env.XATA_HTTPS_DATABSE_URL,
}

export class XataClient extends DatabaseClient<DatabaseSchema> {
    constructor(options?: BaseClientOptions) {
        super({ ...defaultOptions, ...options }, tables)
    }
}

let instance: XataClient | undefined = undefined

export const getXataClient = () => {
    if (instance) return instance

    instance = new XataClient()
    return instance
}
